{"ast":null,"code":"import Airtable from \"airtable\";\nexport default function retrieveRestaurantMenuById(id, callback) {\n  const base = new Airtable({\n    apiKey: 'key5hCfcpO5JBNaYj'\n  }).base('appukpTZGXJdELj61');\n  let error;\n  const menus = [];\n  base('Menus').select({\n    // Selecting the first 3 records in Grid view:\n    // maxRecords: 3,\n    view: \"Grid view\",\n    filterByFormula: `SEARCH(\"${id}\", {Restaurants})`\n  }).eachPage(function page(records, fetchNextPage) {\n    // This function (`page`) will get called for each page of records.\n    try {\n      records.forEach(function (record) {\n        console.log(record);\n        const menu = {};\n        menu.name = record.get('Nom');\n        menu.datails = record.get('Détails');\n        menu.category = record.get('Catégorie');\n        menus.push(menu);\n      }); // To fetch the next page of records, call `fetchNextPage`.\n      // If there are more records, `page` will get called again.\n      // If there are no more records, `done` will get called.\n\n      fetchNextPage();\n    } catch (err) {\n      error = err;\n      return;\n    }\n  }, function done(err) {\n    if (err) {\n      console.error(err);\n      return;\n    }\n\n    callback(error, menus);\n  });\n}","map":{"version":3,"names":["Airtable","retrieveRestaurantMenuById","id","callback","base","apiKey","error","menus","select","view","filterByFormula","eachPage","page","records","fetchNextPage","forEach","record","console","log","menu","name","get","datails","category","push","err","done"],"sources":["/Volumes/Data/Asa/Misaina/Formation/resto-menu/src/dataLoaders/retrieveRestaurantMenuById.js"],"sourcesContent":["import Airtable from \"airtable\";\n\nexport default function retrieveRestaurantMenuById(id, callback) {\n    const base = new Airtable({apiKey: 'key5hCfcpO5JBNaYj'}).base('appukpTZGXJdELj61');\n\n    let error;\n    const menus = [];\n\n    base('Menus').select({\n        // Selecting the first 3 records in Grid view:\n        // maxRecords: 3,\n        view: \"Grid view\",\n        filterByFormula: `SEARCH(\"${id}\", {Restaurants})`\n    }).eachPage(function page(records, fetchNextPage) {\n        // This function (`page`) will get called for each page of records.\n    \n        try {\n            records.forEach(function(record) {\n                console.log(record);\n                const menu = {};\n                menu.name = record.get('Nom');\n                menu.datails = record.get('Détails');\n                menu.category = record.get('Catégorie');\n                menus.push(menu);\n            });\n        \n            // To fetch the next page of records, call `fetchNextPage`.\n            // If there are more records, `page` will get called again.\n            // If there are no more records, `done` will get called.\n            fetchNextPage();\n        } catch(err) {\n            error = err;\n            return;\n        }\n    \n    }, function done(err) {\n        if (err) { console.error(err); return; }\n        callback(error, menus);\n    });\n}"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA,eAAe,SAASC,0BAAT,CAAoCC,EAApC,EAAwCC,QAAxC,EAAkD;EAC7D,MAAMC,IAAI,GAAG,IAAIJ,QAAJ,CAAa;IAACK,MAAM,EAAE;EAAT,CAAb,EAA4CD,IAA5C,CAAiD,mBAAjD,CAAb;EAEA,IAAIE,KAAJ;EACA,MAAMC,KAAK,GAAG,EAAd;EAEAH,IAAI,CAAC,OAAD,CAAJ,CAAcI,MAAd,CAAqB;IACjB;IACA;IACAC,IAAI,EAAE,WAHW;IAIjBC,eAAe,EAAG,WAAUR,EAAG;EAJd,CAArB,EAKGS,QALH,CAKY,SAASC,IAAT,CAAcC,OAAd,EAAuBC,aAAvB,EAAsC;IAC9C;IAEA,IAAI;MACAD,OAAO,CAACE,OAAR,CAAgB,UAASC,MAAT,EAAiB;QAC7BC,OAAO,CAACC,GAAR,CAAYF,MAAZ;QACA,MAAMG,IAAI,GAAG,EAAb;QACAA,IAAI,CAACC,IAAL,GAAYJ,MAAM,CAACK,GAAP,CAAW,KAAX,CAAZ;QACAF,IAAI,CAACG,OAAL,GAAeN,MAAM,CAACK,GAAP,CAAW,SAAX,CAAf;QACAF,IAAI,CAACI,QAAL,GAAgBP,MAAM,CAACK,GAAP,CAAW,WAAX,CAAhB;QACAd,KAAK,CAACiB,IAAN,CAAWL,IAAX;MACH,CAPD,EADA,CAUA;MACA;MACA;;MACAL,aAAa;IAChB,CAdD,CAcE,OAAMW,GAAN,EAAW;MACTnB,KAAK,GAAGmB,GAAR;MACA;IACH;EAEJ,CA3BD,EA2BG,SAASC,IAAT,CAAcD,GAAd,EAAmB;IAClB,IAAIA,GAAJ,EAAS;MAAER,OAAO,CAACX,KAAR,CAAcmB,GAAd;MAAoB;IAAS;;IACxCtB,QAAQ,CAACG,KAAD,EAAQC,KAAR,CAAR;EACH,CA9BD;AA+BH"},"metadata":{},"sourceType":"module"}